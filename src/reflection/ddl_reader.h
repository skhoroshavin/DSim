#ifndef DDL_READER_H
#define DDL_READER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef alignas
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct dsim_ddl_numeric_type_table *dsim_ddl_numeric_type_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_numeric_type_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_numeric_type_mutable_vec_t;
typedef const struct dsim_ddl_struct_field_table *dsim_ddl_struct_field_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_struct_field_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_struct_field_mutable_vec_t;
typedef const struct dsim_ddl_struct_type_table *dsim_ddl_struct_type_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_struct_type_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_struct_type_mutable_vec_t;
typedef const struct dsim_ddl_enum_type_table *dsim_ddl_enum_type_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_enum_type_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_enum_type_mutable_vec_t;
typedef const struct dsim_ddl_reference_type_table *dsim_ddl_reference_type_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_reference_type_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_reference_type_mutable_vec_t;
typedef const struct dsim_ddl_type_table *dsim_ddl_type_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_type_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_type_mutable_vec_t;
typedef const struct dsim_ddl_array_table *dsim_ddl_array_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_array_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_array_mutable_vec_t;
typedef const struct dsim_ddl_layout_table *dsim_ddl_layout_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_layout_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_layout_mutable_vec_t;
typedef const struct dsim_ddl_hash_storage_table *dsim_ddl_hash_storage_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_hash_storage_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_hash_storage_mutable_vec_t;
typedef const struct dsim_ddl_storage_table *dsim_ddl_storage_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_storage_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_storage_mutable_vec_t;
typedef const struct dsim_ddl_root_table *dsim_ddl_root_table_t;
typedef const flatbuffers_uoffset_t *dsim_ddl_root_vec_t;
typedef flatbuffers_uoffset_t *dsim_ddl_root_mutable_vec_t;



/** //////////////////////////////////////////////////////////////////////
 * ////////////////////////////////////////////////////////////////////// */
struct dsim_ddl_numeric_type_table { uint8_t unused__; };

#ifndef dsim_ddl_numeric_type_identifier
#define dsim_ddl_numeric_type_identifier flatbuffers_identifier
#endif
#define dsim_ddl_numeric_type_type_hash ((flatbuffers_thash_t)0x75650eee)
#define dsim_ddl_numeric_type_type_identifier "\xee\x0e\x65\x75"
static inline size_t dsim_ddl_numeric_type_vec_len(dsim_ddl_numeric_type_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_numeric_type_table_t dsim_ddl_numeric_type_vec_at(dsim_ddl_numeric_type_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_numeric_type_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_numeric_type)

__flatbuffers_define_scalar_field(0, dsim_ddl_numeric_type, is_signed, flatbuffers_bool, flatbuffers_bool_t, 0)
__flatbuffers_define_scalar_field(1, dsim_ddl_numeric_type, is_float, flatbuffers_bool, flatbuffers_bool_t, 0)

struct dsim_ddl_struct_field_table { uint8_t unused__; };

#ifndef dsim_ddl_struct_field_identifier
#define dsim_ddl_struct_field_identifier flatbuffers_identifier
#endif
#define dsim_ddl_struct_field_type_hash ((flatbuffers_thash_t)0xbeb0cf0c)
#define dsim_ddl_struct_field_type_identifier "\x0c\xcf\xb0\xbe"
static inline size_t dsim_ddl_struct_field_vec_len(dsim_ddl_struct_field_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_struct_field_table_t dsim_ddl_struct_field_vec_at(dsim_ddl_struct_field_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_struct_field_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_struct_field)

__flatbuffers_define_string_field(0, dsim_ddl_struct_field, name, 0)
__flatbuffers_define_string_field(1, dsim_ddl_struct_field, type, 0)
__flatbuffers_define_scalar_field(2, dsim_ddl_struct_field, offset, flatbuffers_uint32, uint32_t, 0)

struct dsim_ddl_struct_type_table { uint8_t unused__; };

#ifndef dsim_ddl_struct_type_identifier
#define dsim_ddl_struct_type_identifier flatbuffers_identifier
#endif
#define dsim_ddl_struct_type_type_hash ((flatbuffers_thash_t)0xcc855668)
#define dsim_ddl_struct_type_type_identifier "\x68\x56\x85\xcc"
static inline size_t dsim_ddl_struct_type_vec_len(dsim_ddl_struct_type_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_struct_type_table_t dsim_ddl_struct_type_vec_at(dsim_ddl_struct_type_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_struct_type_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_struct_type)

__flatbuffers_define_vector_field(0, dsim_ddl_struct_type, fields, dsim_ddl_struct_field_vec_t, 0)

struct dsim_ddl_enum_type_table { uint8_t unused__; };

#ifndef dsim_ddl_enum_type_identifier
#define dsim_ddl_enum_type_identifier flatbuffers_identifier
#endif
#define dsim_ddl_enum_type_type_hash ((flatbuffers_thash_t)0x303f2354)
#define dsim_ddl_enum_type_type_identifier "\x54\x23\x3f\x30"
static inline size_t dsim_ddl_enum_type_vec_len(dsim_ddl_enum_type_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_enum_type_table_t dsim_ddl_enum_type_vec_at(dsim_ddl_enum_type_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_enum_type_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_enum_type)

__flatbuffers_define_vector_field(0, dsim_ddl_enum_type, values, flatbuffers_string_vec_t, 0)

struct dsim_ddl_reference_type_table { uint8_t unused__; };

#ifndef dsim_ddl_reference_type_identifier
#define dsim_ddl_reference_type_identifier flatbuffers_identifier
#endif
#define dsim_ddl_reference_type_type_hash ((flatbuffers_thash_t)0xa9dce238)
#define dsim_ddl_reference_type_type_identifier "\x38\xe2\xdc\xa9"
static inline size_t dsim_ddl_reference_type_vec_len(dsim_ddl_reference_type_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_reference_type_table_t dsim_ddl_reference_type_vec_at(dsim_ddl_reference_type_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_reference_type_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_reference_type)

__flatbuffers_define_vector_field(0, dsim_ddl_reference_type, storages, flatbuffers_string_vec_t, 0)
typedef uint8_t dsim_ddl_any_type_union_type_t;
__flatbuffers_define_integer_type(dsim_ddl_any_type, dsim_ddl_any_type_union_type_t, 8)
#define dsim_ddl_any_type_NONE ((dsim_ddl_any_type_union_type_t)0U)
#define dsim_ddl_any_type_numeric_type ((dsim_ddl_any_type_union_type_t)1U)
#define dsim_ddl_any_type_struct_type ((dsim_ddl_any_type_union_type_t)2U)
#define dsim_ddl_any_type_enum_type ((dsim_ddl_any_type_union_type_t)3U)
#define dsim_ddl_any_type_reference_type ((dsim_ddl_any_type_union_type_t)4U)

static inline const char *dsim_ddl_any_type_type_name(dsim_ddl_any_type_union_type_t type)
{
    switch (type) {
    case dsim_ddl_any_type_NONE: return "NONE";
    case dsim_ddl_any_type_numeric_type: return "numeric_type";
    case dsim_ddl_any_type_struct_type: return "struct_type";
    case dsim_ddl_any_type_enum_type: return "enum_type";
    case dsim_ddl_any_type_reference_type: return "reference_type";
    default: return "";
    }
}


struct dsim_ddl_type_table { uint8_t unused__; };

#ifndef dsim_ddl_type_identifier
#define dsim_ddl_type_identifier flatbuffers_identifier
#endif
#define dsim_ddl_type_type_hash ((flatbuffers_thash_t)0xb77bd7fa)
#define dsim_ddl_type_type_identifier "\xfa\xd7\x7b\xb7"
static inline size_t dsim_ddl_type_vec_len(dsim_ddl_type_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_type_table_t dsim_ddl_type_vec_at(dsim_ddl_type_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_type_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_type)

__flatbuffers_define_string_field(0, dsim_ddl_type, name, 0)
__flatbuffers_define_string_field(1, dsim_ddl_type, ctype, 0)
__flatbuffers_define_scalar_field(2, dsim_ddl_type, size, flatbuffers_uint8, uint8_t, 0)
__flatbuffers_define_scalar_field(3, dsim_ddl_type, align, flatbuffers_uint8, uint8_t, 0)
__flatbuffers_define_union_field(5, dsim_ddl_type, data, 0)

/** //////////////////////////////////////////////////////////////////////
 * ////////////////////////////////////////////////////////////////////// */
struct dsim_ddl_array_table { uint8_t unused__; };

#ifndef dsim_ddl_array_identifier
#define dsim_ddl_array_identifier flatbuffers_identifier
#endif
#define dsim_ddl_array_type_hash ((flatbuffers_thash_t)0x9788e1fb)
#define dsim_ddl_array_type_identifier "\xfb\xe1\x88\x97"
static inline size_t dsim_ddl_array_vec_len(dsim_ddl_array_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_array_table_t dsim_ddl_array_vec_at(dsim_ddl_array_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_array_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_array)

__flatbuffers_define_string_field(0, dsim_ddl_array, name, 0)
__flatbuffers_define_string_field(1, dsim_ddl_array, type, 0)

struct dsim_ddl_layout_table { uint8_t unused__; };

#ifndef dsim_ddl_layout_identifier
#define dsim_ddl_layout_identifier flatbuffers_identifier
#endif
#define dsim_ddl_layout_type_hash ((flatbuffers_thash_t)0x784c1c04)
#define dsim_ddl_layout_type_identifier "\x04\x1c\x4c\x78"
static inline size_t dsim_ddl_layout_vec_len(dsim_ddl_layout_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_layout_table_t dsim_ddl_layout_vec_at(dsim_ddl_layout_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_layout_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_layout)

__flatbuffers_define_string_field(0, dsim_ddl_layout, name, 0)
__flatbuffers_define_vector_field(1, dsim_ddl_layout, arrays, dsim_ddl_array_vec_t, 0)
/** //////////////////////////////////////////////////////////////////////
 * ////////////////////////////////////////////////////////////////////// */
typedef uint8_t dsim_ddl_storage_engine_union_type_t;
__flatbuffers_define_integer_type(dsim_ddl_storage_engine, dsim_ddl_storage_engine_union_type_t, 8)
#define dsim_ddl_storage_engine_NONE ((dsim_ddl_storage_engine_union_type_t)0U)
#define dsim_ddl_storage_engine_hash_storage ((dsim_ddl_storage_engine_union_type_t)1U)

static inline const char *dsim_ddl_storage_engine_type_name(dsim_ddl_storage_engine_union_type_t type)
{
    switch (type) {
    case dsim_ddl_storage_engine_NONE: return "NONE";
    case dsim_ddl_storage_engine_hash_storage: return "hash_storage";
    default: return "";
    }
}


struct dsim_ddl_hash_storage_table { uint8_t unused__; };

#ifndef dsim_ddl_hash_storage_identifier
#define dsim_ddl_hash_storage_identifier flatbuffers_identifier
#endif
#define dsim_ddl_hash_storage_type_hash ((flatbuffers_thash_t)0x9f500bd0)
#define dsim_ddl_hash_storage_type_identifier "\xd0\x0b\x50\x9f"
static inline size_t dsim_ddl_hash_storage_vec_len(dsim_ddl_hash_storage_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_hash_storage_table_t dsim_ddl_hash_storage_vec_at(dsim_ddl_hash_storage_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_hash_storage_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_hash_storage)


struct dsim_ddl_storage_table { uint8_t unused__; };

#ifndef dsim_ddl_storage_identifier
#define dsim_ddl_storage_identifier flatbuffers_identifier
#endif
#define dsim_ddl_storage_type_hash ((flatbuffers_thash_t)0x65cb8f5f)
#define dsim_ddl_storage_type_identifier "\x5f\x8f\xcb\x65"
static inline size_t dsim_ddl_storage_vec_len(dsim_ddl_storage_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_storage_table_t dsim_ddl_storage_vec_at(dsim_ddl_storage_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_storage_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_storage)

__flatbuffers_define_string_field(0, dsim_ddl_storage, name, 0)
__flatbuffers_define_string_field(1, dsim_ddl_storage, layout, 0)
__flatbuffers_define_string_field(2, dsim_ddl_storage, ref_type, 0)
__flatbuffers_define_union_field(4, dsim_ddl_storage, engine, 0)

/** //////////////////////////////////////////////////////////////////////
 * ////////////////////////////////////////////////////////////////////// */
struct dsim_ddl_root_table { uint8_t unused__; };

#ifndef dsim_ddl_root_identifier
#define dsim_ddl_root_identifier flatbuffers_identifier
#endif
#define dsim_ddl_root_type_hash ((flatbuffers_thash_t)0x991c18e)
#define dsim_ddl_root_type_identifier "\x8e\xc1\x91\x09"
static inline size_t dsim_ddl_root_vec_len(dsim_ddl_root_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsim_ddl_root_table_t dsim_ddl_root_vec_at(dsim_ddl_root_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsim_ddl_root_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsim_ddl_root)

__flatbuffers_define_string_field(0, dsim_ddl_root, name, 0)
__flatbuffers_define_vector_field(1, dsim_ddl_root, types, dsim_ddl_type_vec_t, 0)
__flatbuffers_define_vector_field(2, dsim_ddl_root, layouts, dsim_ddl_layout_vec_t, 0)
__flatbuffers_define_vector_field(3, dsim_ddl_root, storages, dsim_ddl_storage_vec_t, 0)

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DDL_READER_H */
