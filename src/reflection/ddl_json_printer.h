#ifndef DDL_JSON_PRINTER_H
#define DDL_JSON_PRINTER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_printer.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

/*
 * Prints the default root table or struct from a buffer which must have
 * the schema declared file identifier, if any. It is also possible to
 * call the type specific `print_json_as_root` function wich accepts an
 * optional identifier (or 0) as argument. The printer `ctx` object must
 * be initialized with the appropriate output type, or it can be 0 which
 * defaults to stdout. NOTE: `ctx` is not generally allowed to be null, only
 * here for a simplified interface.
 */
static int ddl_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz);

static void __dsim_numeric_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_struct_field_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_struct_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_reference_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_column_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_layout_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void __dsim_ddl_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);

void __dsim_any_type_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td, int id, const char *name, int len)
{
    switch (flatcc_json_printer_read_union_type(td, id)) {
    case 1:
        flatcc_json_printer_union_type(ctx, td, name, len, 1, "numeric_type", 12);
        flatcc_json_printer_table_field(ctx, td, id, name, len, __dsim_numeric_type_print_json_table);
        break;
    case 2:
        flatcc_json_printer_union_type(ctx, td, name, len, 2, "struct_type", 11);
        flatcc_json_printer_table_field(ctx, td, id, name, len, __dsim_struct_type_print_json_table);
        break;
    case 3:
        flatcc_json_printer_union_type(ctx, td, name, len, 3, "reference_type", 14);
        flatcc_json_printer_table_field(ctx, td, id, name, len, __dsim_reference_type_print_json_table);
        break;
    }
}

static void __dsim_numeric_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 0, "is_float", 8, 0);
}

static inline int dsim_numeric_type_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_numeric_type_print_json_table);
}

static void __dsim_struct_field_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_string_field(ctx, td, 1, "type", 4);
    flatcc_json_printer_uint32_field(ctx, td, 2, "offset", 6, 0);
}

static inline int dsim_struct_field_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_struct_field_print_json_table);
}

static void __dsim_struct_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_vector_field(ctx, td, 0, "fields", 6, &__dsim_struct_field_print_json_table);
}

static inline int dsim_struct_type_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_struct_type_print_json_table);
}

static void __dsim_reference_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "target", 6);
}

static inline int dsim_reference_type_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_reference_type_print_json_table);
}

static void __dsim_type_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_string_field(ctx, td, 1, "ctype", 5);
    flatcc_json_printer_uint8_field(ctx, td, 2, "size", 4, 0);
    flatcc_json_printer_uint8_field(ctx, td, 3, "align", 5, 0);
    __dsim_any_type_print_json_union(ctx, td, 5, "data", 4);
}

static inline int dsim_type_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_type_print_json_table);
}

static void __dsim_column_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_string_field(ctx, td, 1, "type", 4);
}

static inline int dsim_column_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_column_print_json_table);
}

static void __dsim_layout_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_table_vector_field(ctx, td, 1, "columns", 7, &__dsim_column_print_json_table);
}

static inline int dsim_layout_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_layout_print_json_table);
}

static void __dsim_ddl_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_vector_field(ctx, td, 0, "types", 5, &__dsim_type_print_json_table);
    flatcc_json_printer_table_vector_field(ctx, td, 1, "layouts", 7, &__dsim_layout_print_json_table);
}

static inline int dsim_ddl_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, &__dsim_ddl_print_json_table);
}

static int ddl_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz)
{
    flatcc_json_printer_t printer;

    if (ctx == 0) {
        ctx = &printer;
        flatcc_json_printer_init(ctx, 0);
    }
    return dsim_ddl_print_json_as_root(ctx, buf, bufsiz, 0);}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DDL_JSON_PRINTER_H */
