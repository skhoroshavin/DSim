#ifndef DDL_BUILDER_H
#define DDL_BUILDER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef DDL_READER_H
#include "ddl_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

typedef struct dsim_ddl_any_type_union_ref dsim_ddl_any_type_union_ref_t;
typedef struct dsim_ddl_storage_engine_union_ref dsim_ddl_storage_engine_union_ref_t;

static const flatbuffers_voffset_t __dsim_ddl_numeric_type_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_numeric_type, 2)
static const flatbuffers_voffset_t __dsim_ddl_struct_field_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_struct_field, 3)
static const flatbuffers_voffset_t __dsim_ddl_struct_type_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_struct_type, 1)
static const flatbuffers_voffset_t __dsim_ddl_enum_type_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_enum_type, 1)
static const flatbuffers_voffset_t __dsim_ddl_reference_type_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_reference_type, 1)
static const flatbuffers_voffset_t __dsim_ddl_type_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_type, 6)
static const flatbuffers_voffset_t __dsim_ddl_array_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_array, 2)
static const flatbuffers_voffset_t __dsim_ddl_layout_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_layout, 2)
static const flatbuffers_voffset_t __dsim_ddl_hash_storage_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_hash_storage, 0)
static const flatbuffers_voffset_t __dsim_ddl_storage_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_storage, 5)
static const flatbuffers_voffset_t __dsim_ddl_root_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, dsim_ddl_root, 4)
#define __dsim_ddl_numeric_type_formal_args , flatbuffers_bool_t v0, flatbuffers_bool_t v1
#define __dsim_ddl_numeric_type_call_args , v0, v1
static inline dsim_ddl_numeric_type_ref_t dsim_ddl_numeric_type_create(flatbuffers_builder_t *B __dsim_ddl_numeric_type_formal_args);
#define __dsim_ddl_struct_field_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1, uint32_t v2
#define __dsim_ddl_struct_field_call_args , v0, v1, v2
static inline dsim_ddl_struct_field_ref_t dsim_ddl_struct_field_create(flatbuffers_builder_t *B __dsim_ddl_struct_field_formal_args);
#define __dsim_ddl_struct_type_formal_args , dsim_ddl_struct_field_vec_ref_t v0
#define __dsim_ddl_struct_type_call_args , v0
static inline dsim_ddl_struct_type_ref_t dsim_ddl_struct_type_create(flatbuffers_builder_t *B __dsim_ddl_struct_type_formal_args);
#define __dsim_ddl_enum_type_formal_args , flatbuffers_string_vec_ref_t v0
#define __dsim_ddl_enum_type_call_args , v0
static inline dsim_ddl_enum_type_ref_t dsim_ddl_enum_type_create(flatbuffers_builder_t *B __dsim_ddl_enum_type_formal_args);
#define __dsim_ddl_reference_type_formal_args , flatbuffers_string_vec_ref_t v0
#define __dsim_ddl_reference_type_call_args , v0
static inline dsim_ddl_reference_type_ref_t dsim_ddl_reference_type_create(flatbuffers_builder_t *B __dsim_ddl_reference_type_formal_args);
#define __dsim_ddl_type_formal_args ,\
  flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1, uint8_t v2, uint8_t v3, dsim_ddl_any_type_union_ref_t v5
#define __dsim_ddl_type_call_args ,\
  v0, v1, v2, v3, v5
static inline dsim_ddl_type_ref_t dsim_ddl_type_create(flatbuffers_builder_t *B __dsim_ddl_type_formal_args);
#define __dsim_ddl_array_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1
#define __dsim_ddl_array_call_args , v0, v1
static inline dsim_ddl_array_ref_t dsim_ddl_array_create(flatbuffers_builder_t *B __dsim_ddl_array_formal_args);
#define __dsim_ddl_layout_formal_args , flatbuffers_string_ref_t v0, dsim_ddl_array_vec_ref_t v1
#define __dsim_ddl_layout_call_args , v0, v1
static inline dsim_ddl_layout_ref_t dsim_ddl_layout_create(flatbuffers_builder_t *B __dsim_ddl_layout_formal_args);
#define __dsim_ddl_hash_storage_formal_args 
#define __dsim_ddl_hash_storage_call_args 
static inline dsim_ddl_hash_storage_ref_t dsim_ddl_hash_storage_create(flatbuffers_builder_t *B __dsim_ddl_hash_storage_formal_args);
#define __dsim_ddl_storage_formal_args , flatbuffers_string_ref_t v0, flatbuffers_string_ref_t v1, flatbuffers_string_ref_t v2, dsim_ddl_storage_engine_union_ref_t v4
#define __dsim_ddl_storage_call_args , v0, v1, v2, v4
static inline dsim_ddl_storage_ref_t dsim_ddl_storage_create(flatbuffers_builder_t *B __dsim_ddl_storage_formal_args);
#define __dsim_ddl_root_formal_args , flatbuffers_string_ref_t v0, dsim_ddl_type_vec_ref_t v1, dsim_ddl_layout_vec_ref_t v2, dsim_ddl_storage_vec_ref_t v3
#define __dsim_ddl_root_call_args , v0, v1, v2, v3
static inline dsim_ddl_root_ref_t dsim_ddl_root_create(flatbuffers_builder_t *B __dsim_ddl_root_formal_args);

struct dsim_ddl_any_type_union_ref {
    dsim_ddl_any_type_union_type_t type;
    union {
        flatbuffers_ref_t _member;
        flatbuffers_ref_t NONE;
        dsim_ddl_numeric_type_ref_t numeric_type;
        dsim_ddl_struct_type_ref_t struct_type;
        dsim_ddl_enum_type_ref_t enum_type;
        dsim_ddl_reference_type_ref_t reference_type;
    };
};

static inline dsim_ddl_any_type_union_ref_t dsim_ddl_any_type_as_NONE()
{ dsim_ddl_any_type_union_ref_t uref; uref.type = dsim_ddl_any_type_NONE; uref._member = 0; return uref; }
static inline dsim_ddl_any_type_union_ref_t dsim_ddl_any_type_as_numeric_type(dsim_ddl_numeric_type_ref_t ref)
{ dsim_ddl_any_type_union_ref_t uref; uref.type = dsim_ddl_any_type_numeric_type; uref.numeric_type = ref; return uref; }
static inline dsim_ddl_any_type_union_ref_t dsim_ddl_any_type_as_struct_type(dsim_ddl_struct_type_ref_t ref)
{ dsim_ddl_any_type_union_ref_t uref; uref.type = dsim_ddl_any_type_struct_type; uref.struct_type = ref; return uref; }
static inline dsim_ddl_any_type_union_ref_t dsim_ddl_any_type_as_enum_type(dsim_ddl_enum_type_ref_t ref)
{ dsim_ddl_any_type_union_ref_t uref; uref.type = dsim_ddl_any_type_enum_type; uref.enum_type = ref; return uref; }
static inline dsim_ddl_any_type_union_ref_t dsim_ddl_any_type_as_reference_type(dsim_ddl_reference_type_ref_t ref)
{ dsim_ddl_any_type_union_ref_t uref; uref.type = dsim_ddl_any_type_reference_type; uref.reference_type = ref; return uref; }
struct dsim_ddl_storage_engine_union_ref {
    dsim_ddl_storage_engine_union_type_t type;
    union {
        flatbuffers_ref_t _member;
        flatbuffers_ref_t NONE;
        dsim_ddl_hash_storage_ref_t hash_storage;
    };
};

static inline dsim_ddl_storage_engine_union_ref_t dsim_ddl_storage_engine_as_NONE()
{ dsim_ddl_storage_engine_union_ref_t uref; uref.type = dsim_ddl_storage_engine_NONE; uref._member = 0; return uref; }
static inline dsim_ddl_storage_engine_union_ref_t dsim_ddl_storage_engine_as_hash_storage(dsim_ddl_hash_storage_ref_t ref)
{ dsim_ddl_storage_engine_union_ref_t uref; uref.type = dsim_ddl_storage_engine_hash_storage; uref.hash_storage = ref; return uref; }

__flatbuffers_build_scalar_field(0, flatbuffers_, dsim_ddl_numeric_type_is_signed, flatbuffers_bool, flatbuffers_bool_t, 1, 1, 0)
__flatbuffers_build_scalar_field(1, flatbuffers_, dsim_ddl_numeric_type_is_float, flatbuffers_bool, flatbuffers_bool_t, 1, 1, 0)

static inline dsim_ddl_numeric_type_ref_t dsim_ddl_numeric_type_create(flatbuffers_builder_t *B __dsim_ddl_numeric_type_formal_args)
{
    if (dsim_ddl_numeric_type_start(B)
        || dsim_ddl_numeric_type_is_signed_add(B, v0)
        || dsim_ddl_numeric_type_is_float_add(B, v1)) {
        return 0;
    }
    return dsim_ddl_numeric_type_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_numeric_type, dsim_ddl_numeric_type_identifier, dsim_ddl_numeric_type_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dsim_ddl_struct_field_name)
__flatbuffers_build_string_field(1, flatbuffers_, dsim_ddl_struct_field_type)
__flatbuffers_build_scalar_field(2, flatbuffers_, dsim_ddl_struct_field_offset, flatbuffers_uint32, uint32_t, 4, 4, 0)

static inline dsim_ddl_struct_field_ref_t dsim_ddl_struct_field_create(flatbuffers_builder_t *B __dsim_ddl_struct_field_formal_args)
{
    if (dsim_ddl_struct_field_start(B)
        || dsim_ddl_struct_field_name_add(B, v0)
        || dsim_ddl_struct_field_type_add(B, v1)
        || dsim_ddl_struct_field_offset_add(B, v2)) {
        return 0;
    }
    return dsim_ddl_struct_field_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_struct_field, dsim_ddl_struct_field_identifier, dsim_ddl_struct_field_type_identifier)

/* vector has keyed elements */
__flatbuffers_build_table_vector_field(0, flatbuffers_, dsim_ddl_struct_type_fields, dsim_ddl_struct_field)

static inline dsim_ddl_struct_type_ref_t dsim_ddl_struct_type_create(flatbuffers_builder_t *B __dsim_ddl_struct_type_formal_args)
{
    if (dsim_ddl_struct_type_start(B)
        || dsim_ddl_struct_type_fields_add(B, v0)) {
        return 0;
    }
    return dsim_ddl_struct_type_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_struct_type, dsim_ddl_struct_type_identifier, dsim_ddl_struct_type_type_identifier)

__flatbuffers_build_string_vector_field(0, flatbuffers_, dsim_ddl_enum_type_values)

static inline dsim_ddl_enum_type_ref_t dsim_ddl_enum_type_create(flatbuffers_builder_t *B __dsim_ddl_enum_type_formal_args)
{
    if (dsim_ddl_enum_type_start(B)
        || dsim_ddl_enum_type_values_add(B, v0)) {
        return 0;
    }
    return dsim_ddl_enum_type_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_enum_type, dsim_ddl_enum_type_identifier, dsim_ddl_enum_type_type_identifier)

__flatbuffers_build_string_vector_field(0, flatbuffers_, dsim_ddl_reference_type_storages)

static inline dsim_ddl_reference_type_ref_t dsim_ddl_reference_type_create(flatbuffers_builder_t *B __dsim_ddl_reference_type_formal_args)
{
    if (dsim_ddl_reference_type_start(B)
        || dsim_ddl_reference_type_storages_add(B, v0)) {
        return 0;
    }
    return dsim_ddl_reference_type_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_reference_type, dsim_ddl_reference_type_identifier, dsim_ddl_reference_type_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dsim_ddl_type_name)
__flatbuffers_build_string_field(1, flatbuffers_, dsim_ddl_type_ctype)
__flatbuffers_build_scalar_field(2, flatbuffers_, dsim_ddl_type_size, flatbuffers_uint8, uint8_t, 1, 1, 0)
__flatbuffers_build_scalar_field(3, flatbuffers_, dsim_ddl_type_align, flatbuffers_uint8, uint8_t, 1, 1, 0)
__flatbuffers_build_union_field(5, flatbuffers_, dsim_ddl_type_data, dsim_ddl_any_type)
__flatbuffers_build_union_member_field(flatbuffers_, dsim_ddl_type_data, dsim_ddl_any_type, numeric_type, dsim_ddl_numeric_type)
__flatbuffers_build_union_member_field(flatbuffers_, dsim_ddl_type_data, dsim_ddl_any_type, struct_type, dsim_ddl_struct_type)
__flatbuffers_build_union_member_field(flatbuffers_, dsim_ddl_type_data, dsim_ddl_any_type, enum_type, dsim_ddl_enum_type)
__flatbuffers_build_union_member_field(flatbuffers_, dsim_ddl_type_data, dsim_ddl_any_type, reference_type, dsim_ddl_reference_type)

static inline dsim_ddl_type_ref_t dsim_ddl_type_create(flatbuffers_builder_t *B __dsim_ddl_type_formal_args)
{
    if (dsim_ddl_type_start(B)
        || dsim_ddl_type_name_add(B, v0)
        || dsim_ddl_type_ctype_add(B, v1)
        || dsim_ddl_type_data_add_member(B, v5)
        || dsim_ddl_type_size_add(B, v2)
        || dsim_ddl_type_align_add(B, v3)
        || dsim_ddl_type_data_add_type(B, v5.type)) {
        return 0;
    }
    return dsim_ddl_type_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_type, dsim_ddl_type_identifier, dsim_ddl_type_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dsim_ddl_array_name)
__flatbuffers_build_string_field(1, flatbuffers_, dsim_ddl_array_type)

static inline dsim_ddl_array_ref_t dsim_ddl_array_create(flatbuffers_builder_t *B __dsim_ddl_array_formal_args)
{
    if (dsim_ddl_array_start(B)
        || dsim_ddl_array_name_add(B, v0)
        || dsim_ddl_array_type_add(B, v1)) {
        return 0;
    }
    return dsim_ddl_array_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_array, dsim_ddl_array_identifier, dsim_ddl_array_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dsim_ddl_layout_name)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(1, flatbuffers_, dsim_ddl_layout_arrays, dsim_ddl_array)

static inline dsim_ddl_layout_ref_t dsim_ddl_layout_create(flatbuffers_builder_t *B __dsim_ddl_layout_formal_args)
{
    if (dsim_ddl_layout_start(B)
        || dsim_ddl_layout_name_add(B, v0)
        || dsim_ddl_layout_arrays_add(B, v1)) {
        return 0;
    }
    return dsim_ddl_layout_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_layout, dsim_ddl_layout_identifier, dsim_ddl_layout_type_identifier)


static inline dsim_ddl_hash_storage_ref_t dsim_ddl_hash_storage_create(flatbuffers_builder_t *B __dsim_ddl_hash_storage_formal_args)
{
    if (dsim_ddl_hash_storage_start(B)) {
        return 0;
    }
    return dsim_ddl_hash_storage_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_hash_storage, dsim_ddl_hash_storage_identifier, dsim_ddl_hash_storage_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dsim_ddl_storage_name)
__flatbuffers_build_string_field(1, flatbuffers_, dsim_ddl_storage_layout)
__flatbuffers_build_string_field(2, flatbuffers_, dsim_ddl_storage_ref_type)
__flatbuffers_build_union_field(4, flatbuffers_, dsim_ddl_storage_engine, dsim_ddl_storage_engine)
__flatbuffers_build_union_member_field(flatbuffers_, dsim_ddl_storage_engine, dsim_ddl_storage_engine, hash_storage, dsim_ddl_hash_storage)

static inline dsim_ddl_storage_ref_t dsim_ddl_storage_create(flatbuffers_builder_t *B __dsim_ddl_storage_formal_args)
{
    if (dsim_ddl_storage_start(B)
        || dsim_ddl_storage_name_add(B, v0)
        || dsim_ddl_storage_layout_add(B, v1)
        || dsim_ddl_storage_ref_type_add(B, v2)
        || dsim_ddl_storage_engine_add_member(B, v4)
        || dsim_ddl_storage_engine_add_type(B, v4.type)) {
        return 0;
    }
    return dsim_ddl_storage_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_storage, dsim_ddl_storage_identifier, dsim_ddl_storage_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, dsim_ddl_root_name)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(1, flatbuffers_, dsim_ddl_root_types, dsim_ddl_type)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(2, flatbuffers_, dsim_ddl_root_layouts, dsim_ddl_layout)
/* vector has keyed elements */
__flatbuffers_build_table_vector_field(3, flatbuffers_, dsim_ddl_root_storages, dsim_ddl_storage)

static inline dsim_ddl_root_ref_t dsim_ddl_root_create(flatbuffers_builder_t *B __dsim_ddl_root_formal_args)
{
    if (dsim_ddl_root_start(B)
        || dsim_ddl_root_name_add(B, v0)
        || dsim_ddl_root_types_add(B, v1)
        || dsim_ddl_root_layouts_add(B, v2)
        || dsim_ddl_root_storages_add(B, v3)) {
        return 0;
    }
    return dsim_ddl_root_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, dsim_ddl_root, dsim_ddl_root_identifier, dsim_ddl_root_type_identifier)

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DDL_BUILDER_H */
