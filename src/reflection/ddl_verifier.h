#ifndef DDL_VERIFIER_H
#define DDL_VERIFIER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef DDL_READER_H
#include "ddl_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

static int __dsim_ddl_numeric_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_struct_field_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_struct_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_enum_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_reference_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_array_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_layout_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_hash_storage_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_storage_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_ddl_root_table_verifier(flatcc_table_verifier_descriptor_t *td);

static int __dsim_ddl_any_type_union_verifier(flatcc_table_verifier_descriptor_t *td, flatbuffers_voffset_t id, uint8_t type)
{
    switch(type) {
    case 1: return flatcc_verify_table_field(td, id, 0, __dsim_ddl_numeric_type_table_verifier);
    case 2: return flatcc_verify_table_field(td, id, 0, __dsim_ddl_struct_type_table_verifier);
    case 3: return flatcc_verify_table_field(td, id, 0, __dsim_ddl_enum_type_table_verifier);
    case 4: return flatcc_verify_table_field(td, id, 0, __dsim_ddl_reference_type_table_verifier);
    default: return flatcc_verify_ok;
    }
}

static int __dsim_ddl_storage_engine_union_verifier(flatcc_table_verifier_descriptor_t *td, flatbuffers_voffset_t id, uint8_t type)
{
    switch(type) {
    case 1: return flatcc_verify_table_field(td, id, 0, __dsim_ddl_hash_storage_table_verifier);
    default: return flatcc_verify_ok;
    }
}

static int __dsim_ddl_numeric_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* is_signed */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* is_float */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_numeric_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_numeric_type_identifier, &__dsim_ddl_numeric_type_table_verifier);
}

static inline int dsim_ddl_numeric_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_numeric_type_type_identifier, &__dsim_ddl_numeric_type_table_verifier);
}

static inline int dsim_ddl_numeric_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_numeric_type_table_verifier);
}

static inline int dsim_ddl_numeric_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_numeric_type_table_verifier);
}

static int __dsim_ddl_struct_field_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* type */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* offset */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_struct_field_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_struct_field_identifier, &__dsim_ddl_struct_field_table_verifier);
}

static inline int dsim_ddl_struct_field_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_struct_field_type_identifier, &__dsim_ddl_struct_field_table_verifier);
}

static inline int dsim_ddl_struct_field_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_struct_field_table_verifier);
}

static inline int dsim_ddl_struct_field_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_struct_field_table_verifier);
}

static int __dsim_ddl_struct_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &__dsim_ddl_struct_field_table_verifier) /* fields */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_struct_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_struct_type_identifier, &__dsim_ddl_struct_type_table_verifier);
}

static inline int dsim_ddl_struct_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_struct_type_type_identifier, &__dsim_ddl_struct_type_table_verifier);
}

static inline int dsim_ddl_struct_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_struct_type_table_verifier);
}

static inline int dsim_ddl_struct_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_struct_type_table_verifier);
}

static int __dsim_ddl_enum_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_vector_field(td, 0, 0) /* values */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_enum_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_enum_type_identifier, &__dsim_ddl_enum_type_table_verifier);
}

static inline int dsim_ddl_enum_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_enum_type_type_identifier, &__dsim_ddl_enum_type_table_verifier);
}

static inline int dsim_ddl_enum_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_enum_type_table_verifier);
}

static inline int dsim_ddl_enum_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_enum_type_table_verifier);
}

static int __dsim_ddl_reference_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* storage */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_reference_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_reference_type_identifier, &__dsim_ddl_reference_type_table_verifier);
}

static inline int dsim_ddl_reference_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_reference_type_type_identifier, &__dsim_ddl_reference_type_table_verifier);
}

static inline int dsim_ddl_reference_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_reference_type_table_verifier);
}

static inline int dsim_ddl_reference_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_reference_type_table_verifier);
}

static int __dsim_ddl_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* ctype */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* size */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* align */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 5, 0, &__dsim_ddl_any_type_union_verifier) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_type_identifier, &__dsim_ddl_type_table_verifier);
}

static inline int dsim_ddl_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_type_type_identifier, &__dsim_ddl_type_table_verifier);
}

static inline int dsim_ddl_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_type_table_verifier);
}

static inline int dsim_ddl_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_type_table_verifier);
}

static int __dsim_ddl_array_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* type */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_array_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_array_identifier, &__dsim_ddl_array_table_verifier);
}

static inline int dsim_ddl_array_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_array_type_identifier, &__dsim_ddl_array_table_verifier);
}

static inline int dsim_ddl_array_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_array_table_verifier);
}

static inline int dsim_ddl_array_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_array_table_verifier);
}

static int __dsim_ddl_layout_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &__dsim_ddl_array_table_verifier) /* arrays */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_layout_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_layout_identifier, &__dsim_ddl_layout_table_verifier);
}

static inline int dsim_ddl_layout_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_layout_type_identifier, &__dsim_ddl_layout_table_verifier);
}

static inline int dsim_ddl_layout_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_layout_table_verifier);
}

static inline int dsim_ddl_layout_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_layout_table_verifier);
}

static int __dsim_ddl_hash_storage_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int dsim_ddl_hash_storage_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_hash_storage_identifier, &__dsim_ddl_hash_storage_table_verifier);
}

static inline int dsim_ddl_hash_storage_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_hash_storage_type_identifier, &__dsim_ddl_hash_storage_table_verifier);
}

static inline int dsim_ddl_hash_storage_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_hash_storage_table_verifier);
}

static inline int dsim_ddl_hash_storage_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_hash_storage_table_verifier);
}

static int __dsim_ddl_storage_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* layout */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 3, 0, &__dsim_ddl_storage_engine_union_verifier) /* engine */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_storage_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_storage_identifier, &__dsim_ddl_storage_table_verifier);
}

static inline int dsim_ddl_storage_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_storage_type_identifier, &__dsim_ddl_storage_table_verifier);
}

static inline int dsim_ddl_storage_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_storage_table_verifier);
}

static inline int dsim_ddl_storage_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_storage_table_verifier);
}

static int __dsim_ddl_root_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &__dsim_ddl_type_table_verifier) /* types */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &__dsim_ddl_layout_table_verifier) /* layouts */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 3, 0, &__dsim_ddl_storage_table_verifier) /* storages */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_ddl_root_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_root_identifier, &__dsim_ddl_root_table_verifier);
}

static inline int dsim_ddl_root_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_ddl_root_type_identifier, &__dsim_ddl_root_table_verifier);
}

static inline int dsim_ddl_root_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_ddl_root_table_verifier);
}

static inline int dsim_ddl_root_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_ddl_root_table_verifier);
}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* DDL_VERIFIER_H */
