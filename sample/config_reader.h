#ifndef CONFIG_READER_H
#define CONFIG_READER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef alignas
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct dsimx_column_table *dsimx_column_table_t;
typedef const flatbuffers_uoffset_t *dsimx_column_vec_t;
typedef flatbuffers_uoffset_t *dsimx_column_mutable_vec_t;
typedef const struct dsimx_schema_table *dsimx_schema_table_t;
typedef const flatbuffers_uoffset_t *dsimx_schema_vec_t;
typedef flatbuffers_uoffset_t *dsimx_schema_mutable_vec_t;
typedef const struct dsimx_config_table *dsimx_config_table_t;
typedef const flatbuffers_uoffset_t *dsimx_config_vec_t;
typedef flatbuffers_uoffset_t *dsimx_config_mutable_vec_t;

typedef uint8_t dsimx_type_enum_t;
__flatbuffers_define_integer_type(dsimx_type, dsimx_type_enum_t, 8)
#define dsimx_type_INT ((dsimx_type_enum_t)0U)
#define dsimx_type_FLOAT ((dsimx_type_enum_t)1U)
#define dsimx_type_STRUCT ((dsimx_type_enum_t)2U)

static inline const char *dsimx_type_name(dsimx_type_enum_t value)
{
    switch (value) {
    case dsimx_type_INT: return "INT";
    case dsimx_type_FLOAT: return "FLOAT";
    case dsimx_type_STRUCT: return "STRUCT";
    default: return "";
    }
}



struct dsimx_column_table { uint8_t unused__; };

#ifndef dsimx_column_identifier
#define dsimx_column_identifier flatbuffers_identifier
#endif
#define dsimx_column_type_hash ((flatbuffers_thash_t)0x98d399fa)
#define dsimx_column_type_identifier "\xfa\x99\xd3\x98"
static inline size_t dsimx_column_vec_len(dsimx_column_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsimx_column_table_t dsimx_column_vec_at(dsimx_column_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsimx_column_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsimx_column)

static inline flatbuffers_string_t dsimx_column_name(dsimx_column_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 0, t, 0)
/* Note: find only works on vectors sorted by this field. */
static inline size_t dsimx_column_vec_find_by_name(dsimx_column_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(dsimx_column_name, vec, dsimx_column_vec_at, dsimx_column_vec_len, s)
static inline size_t dsimx_column_vec_find_n_by_name(dsimx_column_vec_t vec, const char *s, int n)
__flatbuffers_find_by_string_n_field(dsimx_column_name, vec, dsimx_column_vec_at, dsimx_column_vec_len, s, n)
__flatbuffers_define_sort_by_string_field(dsimx_column, name)
#define dsimx_column_vec_find dsimx_column_vec_find_by_name
#define dsimx_column_vec_find_n dsimx_column_vec_find_n_by_name
#define dsimx_column_vec_sort dsimx_column_vec_sort_by_name
static inline int dsimx_column_name_is_present(dsimx_column_table_t t)
__flatbuffers_field_present(0, t)

static inline uint8_t dsimx_column_size(dsimx_column_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint8, 1, 0, t)
static inline int dsimx_column_size_is_present(dsimx_column_table_t t)
__flatbuffers_field_present(1, t)

static inline dsimx_type_enum_t dsimx_column_type(dsimx_column_table_t t)
__flatbuffers_scalar_field(dsimx_type, 2, 0, t)
static inline int dsimx_column_type_is_present(dsimx_column_table_t t)
__flatbuffers_field_present(2, t)


struct dsimx_schema_table { uint8_t unused__; };

#ifndef dsimx_schema_identifier
#define dsimx_schema_identifier flatbuffers_identifier
#endif
#define dsimx_schema_type_hash ((flatbuffers_thash_t)0x8446ae2b)
#define dsimx_schema_type_identifier "\x2b\xae\x46\x84"
static inline size_t dsimx_schema_vec_len(dsimx_schema_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsimx_schema_table_t dsimx_schema_vec_at(dsimx_schema_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsimx_schema_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsimx_schema)

static inline flatbuffers_string_t dsimx_schema_name(dsimx_schema_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 0, t, 0)
/* Note: find only works on vectors sorted by this field. */
static inline size_t dsimx_schema_vec_find_by_name(dsimx_schema_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(dsimx_schema_name, vec, dsimx_schema_vec_at, dsimx_schema_vec_len, s)
static inline size_t dsimx_schema_vec_find_n_by_name(dsimx_schema_vec_t vec, const char *s, int n)
__flatbuffers_find_by_string_n_field(dsimx_schema_name, vec, dsimx_schema_vec_at, dsimx_schema_vec_len, s, n)
__flatbuffers_define_sort_by_string_field(dsimx_schema, name)
#define dsimx_schema_vec_find dsimx_schema_vec_find_by_name
#define dsimx_schema_vec_find_n dsimx_schema_vec_find_n_by_name
#define dsimx_schema_vec_sort dsimx_schema_vec_sort_by_name
static inline int dsimx_schema_name_is_present(dsimx_schema_table_t t)
__flatbuffers_field_present(0, t)

static inline dsimx_column_vec_t dsimx_schema_columns(dsimx_schema_table_t t)
__flatbuffers_vector_field(dsimx_column_vec_t, 1, t, 0)
static inline int dsimx_schema_columns_is_present(dsimx_schema_table_t t)
__flatbuffers_field_present(1, t)


struct dsimx_config_table { uint8_t unused__; };

#ifndef dsimx_config_identifier
#define dsimx_config_identifier flatbuffers_identifier
#endif
#define dsimx_config_type_hash ((flatbuffers_thash_t)0x1d55abbe)
#define dsimx_config_type_identifier "\xbe\xab\x55\x1d"
static inline size_t dsimx_config_vec_len(dsimx_config_vec_t vec)
__flatbuffers_vec_len(vec)
static inline dsimx_config_table_t dsimx_config_vec_at(dsimx_config_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(dsimx_config_table_t, vec, i, 0)
__flatbuffers_table_as_root(dsimx_config)

static inline dsimx_schema_vec_t dsimx_config_schemas(dsimx_config_table_t t)
__flatbuffers_vector_field(dsimx_schema_vec_t, 0, t, 0)
static inline int dsimx_config_schemas_is_present(dsimx_config_table_t t)
__flatbuffers_field_present(0, t)


#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* CONFIG_READER_H */
