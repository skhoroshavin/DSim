#ifndef CONFIG_JSON_PARSER_H
#define CONFIG_JSON_PARSER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

/*
 * Parses the default root table or struct of the schema and constructs a FlatBuffer.
 *
 * Builder `B` must be initialized. `ctx` can be null but will hold
 * hold detailed error info on return when available.
 * Returns 0 on success, or error code.
 * `flags` : 0 by default, `flatcc_json_parser_f_skip_unknown` silently
 * ignores unknown table and structs fields, and union types.
 */
static int config_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, int flags);

static const char *dsimx_type_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *dsimx_column_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end);
static const char *dsimx_schema_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end);
static const char *dsimx_config_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end);
static const char *config_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *config_local_dsimx_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *config_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *dsimx_type_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x494e540000000000) { /* branch "INT" */
        if ((w & 0xffffffffff000000) == 0x464c4f4154000000) { /* "FLOAT" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = 1, *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "FLOAT" */
            return unmatched;
        } /* "FLOAT" */
    } else { /* branch "INT" */
        if ((w & 0xffffffffffff0000) == 0x5354525543540000) { /* "STRUCT" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
            if (buf != mark) {
                *value = 2, *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "STRUCT" */
            if ((w & 0xffffff0000000000) == 0x494e540000000000) { /* "INT" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                if (buf != mark) {
                    *value = 0, *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "INT" */
                return unmatched;
            } /* "INT" */
        } /* "STRUCT" */
    } /* branch "INT" */
    return buf;
}

static const char *dsimx_column_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    flatcc_json_parser_escape_buffer_t code;

    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x73697a6500000000) { /* branch "size" */
            if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    buf = flatcc_json_parser_string_start(ctx, buf, end);
                    buf = flatcc_json_parser_string_part(ctx, (mark = buf), end);
                    if (buf != end && *buf == '\"') {
                        ref = flatcc_builder_create_string(ctx->ctx, mark, buf - mark);
                    } else {
                        if (flatcc_builder_start_string(ctx->ctx) ||
                                0 == flatcc_builder_append_string(ctx->ctx, mark, buf - mark)) goto failed;
                        while (buf != end && *buf != '\"') {
                            buf = flatcc_json_parser_string_escape(ctx, buf, end, code);
                            if (0 == flatcc_builder_append_string(ctx->ctx, code + 1, code[0])) goto failed;
                            if (end != (buf = flatcc_json_parser_string_part(ctx, (mark = buf), end))) {
                                if (0 == flatcc_builder_append_string(ctx->ctx, mark, buf - mark)) goto failed;
                            }
                        }
                        ref = flatcc_builder_end_string(ctx->ctx);
                    }
                    buf = flatcc_json_parser_string_end(ctx, buf, end);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "name" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "name" */
        } else { /* branch "size" */
            if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            dsimx_type_parse_json_enum,
                            config_local_dsimx_json_parser_enum,
                            config_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                        flatbuffers_uint8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "type" */
                if ((w & 0xffffffff00000000) == 0x73697a6500000000) { /* "size" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                config_local_dsimx_json_parser_enum,
                                config_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                            flatbuffers_uint8_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "size" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "size" */
            } /* "type" */
        } /* branch "size" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *dsimx_schema_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    flatcc_json_parser_escape_buffer_t code;

    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                buf = flatcc_json_parser_string_start(ctx, buf, end);
                buf = flatcc_json_parser_string_part(ctx, (mark = buf), end);
                if (buf != end && *buf == '\"') {
                    ref = flatcc_builder_create_string(ctx->ctx, mark, buf - mark);
                } else {
                    if (flatcc_builder_start_string(ctx->ctx) ||
                            0 == flatcc_builder_append_string(ctx->ctx, mark, buf - mark)) goto failed;
                    while (buf != end && *buf != '\"') {
                        buf = flatcc_json_parser_string_escape(ctx, buf, end, code);
                        if (0 == flatcc_builder_append_string(ctx->ctx, code + 1, code[0])) goto failed;
                        if (end != (buf = flatcc_json_parser_string_part(ctx, (mark = buf), end))) {
                            if (0 == flatcc_builder_append_string(ctx->ctx, mark, buf - mark)) goto failed;
                        }
                    }
                    ref = flatcc_builder_end_string(ctx->ctx);
                }
                buf = flatcc_json_parser_string_end(ctx, buf, end);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "name" */
            if ((w & 0xffffffffffffff00) == 0x636f6c756d6e7300) { /* "columns" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        buf = dsimx_column_parse_json_table(ctx, buf, end);
                        ref = flatcc_builder_end_table(ctx->ctx);
                        if (!(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "columns" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "columns" */
        } /* "name" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *dsimx_config_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    flatcc_json_parser_escape_buffer_t code;

    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffffff00) == 0x736368656d617300) { /* "schemas" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
            if (mark != buf) {
                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    buf = dsimx_schema_parse_json_table(ctx, buf, end);
                    ref = flatcc_builder_end_table(ctx->ctx);
                    if (!(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "schemas" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "schemas" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *config_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *config_local_dsimx_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
        if (buf != mark) {
            buf = dsimx_type_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
        } else {
            return unmatched;
        }
    } else { /* "type" */
        return unmatched;
    } /* "type" */
    return buf;
}

static const char *config_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x6473696d782e7479) { /* prefix "dsimx.ty" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffff000000000000) == 0x7065000000000000) { /* "pe" */
            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
            if (buf != mark) {
                buf = dsimx_type_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
            } else {
                return unmatched;
            }
        } else { /* "pe" */
            return unmatched;
        } /* "pe" */
    } else { /* prefix "dsimx.ty" */
        return unmatched;
    } /* prefix "dsimx.ty" */
    return buf;
}

static int config_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, int flags)
{
    flatcc_json_parser_t parser;
    flatcc_builder_ref_t root;

    ctx = ctx ? ctx : &parser;
    flatcc_json_parser_init(ctx, B, buf, buf + bufsiz, flags);
    if (flatcc_builder_start_buffer(B, 0, 0, 0)) return -1;
    dsimx_config_parse_json_table(ctx, buf, buf + bufsiz);
    if (ctx->error) {
        return ctx->error;
    }
    root = flatcc_builder_end_table(B);
    if (!flatcc_builder_end_buffer(B, root)) return -1;
    ctx->end_loc = buf;
    return 0;
}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* CONFIG_JSON_PARSER_H */
