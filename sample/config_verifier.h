#ifndef CONFIG_VERIFIER_H
#define CONFIG_VERIFIER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef CONFIG_READER_H
#include "config_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

static int __dsimx_column_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsimx_schema_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsimx_config_table_verifier(flatcc_table_verifier_descriptor_t *td);

static int __dsimx_column_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* size */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* type */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsimx_column_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsimx_column_identifier, &__dsimx_column_table_verifier);
}

static inline int dsimx_column_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsimx_column_type_identifier, &__dsimx_column_table_verifier);
}

static inline int dsimx_column_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsimx_column_table_verifier);
}

static inline int dsimx_column_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsimx_column_table_verifier);
}

static int __dsimx_schema_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &__dsimx_column_table_verifier) /* columns */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsimx_schema_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsimx_schema_identifier, &__dsimx_schema_table_verifier);
}

static inline int dsimx_schema_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsimx_schema_type_identifier, &__dsimx_schema_table_verifier);
}

static inline int dsimx_schema_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsimx_schema_table_verifier);
}

static inline int dsimx_schema_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsimx_schema_table_verifier);
}

static int __dsimx_config_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &__dsimx_schema_table_verifier) /* schemas */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsimx_config_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsimx_config_identifier, &__dsimx_config_table_verifier);
}

static inline int dsimx_config_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsimx_config_type_identifier, &__dsimx_config_table_verifier);
}

static inline int dsimx_config_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsimx_config_table_verifier);
}

static inline int dsimx_config_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsimx_config_table_verifier);
}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* CONFIG_VERIFIER_H */
