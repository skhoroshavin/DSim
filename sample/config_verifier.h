#ifndef CONFIG_VERIFIER_H
#define CONFIG_VERIFIER_H

/* Generated by flatcc 0.4.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef CONFIG_READER_H
#include "config_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

static int __dsim_numeric_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_struct_field_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_struct_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_type_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_column_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_schema_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __dsim_config_table_verifier(flatcc_table_verifier_descriptor_t *td);

static int __dsim_any_type_union_verifier(flatcc_table_verifier_descriptor_t *td, flatbuffers_voffset_t id, uint8_t type)
{
    switch(type) {
    case 1: return flatcc_verify_table_field(td, id, 0, __dsim_numeric_type_table_verifier);
    case 2: return flatcc_verify_table_field(td, id, 0, __dsim_struct_type_table_verifier);
    default: return flatcc_verify_ok;
    }
}

static int __dsim_numeric_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* is_float */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_numeric_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_numeric_type_identifier, &__dsim_numeric_type_table_verifier);
}

static inline int dsim_numeric_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_numeric_type_type_identifier, &__dsim_numeric_type_table_verifier);
}

static inline int dsim_numeric_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_numeric_type_table_verifier);
}

static inline int dsim_numeric_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_numeric_type_table_verifier);
}

static int __dsim_struct_field_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* type */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* offset */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_struct_field_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_struct_field_identifier, &__dsim_struct_field_table_verifier);
}

static inline int dsim_struct_field_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_struct_field_type_identifier, &__dsim_struct_field_table_verifier);
}

static inline int dsim_struct_field_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_struct_field_table_verifier);
}

static inline int dsim_struct_field_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_struct_field_table_verifier);
}

static int __dsim_struct_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &__dsim_struct_field_table_verifier) /* fields */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_struct_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_struct_type_identifier, &__dsim_struct_type_table_verifier);
}

static inline int dsim_struct_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_struct_type_type_identifier, &__dsim_struct_type_table_verifier);
}

static inline int dsim_struct_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_struct_type_table_verifier);
}

static inline int dsim_struct_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_struct_type_table_verifier);
}

static int __dsim_type_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* size */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 3, 0, &__dsim_any_type_union_verifier) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_type_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_type_identifier, &__dsim_type_table_verifier);
}

static inline int dsim_type_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_type_type_identifier, &__dsim_type_table_verifier);
}

static inline int dsim_type_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_type_table_verifier);
}

static inline int dsim_type_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_type_table_verifier);
}

static int __dsim_column_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* type */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_column_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_column_identifier, &__dsim_column_table_verifier);
}

static inline int dsim_column_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_column_type_identifier, &__dsim_column_table_verifier);
}

static inline int dsim_column_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_column_table_verifier);
}

static inline int dsim_column_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_column_table_verifier);
}

static int __dsim_schema_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &__dsim_column_table_verifier) /* columns */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_schema_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_schema_identifier, &__dsim_schema_table_verifier);
}

static inline int dsim_schema_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_schema_type_identifier, &__dsim_schema_table_verifier);
}

static inline int dsim_schema_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_schema_table_verifier);
}

static inline int dsim_schema_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_schema_table_verifier);
}

static int __dsim_config_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &__dsim_type_table_verifier) /* types */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &__dsim_schema_table_verifier) /* schemas */)) return ret;
    return flatcc_verify_ok;
}

static inline int dsim_config_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_config_identifier, &__dsim_config_table_verifier);
}

static inline int dsim_config_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, dsim_config_type_identifier, &__dsim_config_table_verifier);
}

static inline int dsim_config_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__dsim_config_table_verifier);
}

static inline int dsim_config_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &__dsim_config_table_verifier);
}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* CONFIG_VERIFIER_H */
